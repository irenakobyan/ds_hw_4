problem 1

import java.util.*;
public class hw4 {
    public class SinglyLinkedList<E> 
    {
        public SinglyLinkedList( ) { 
            
        } 
        
         private Node<E> head = null; 
         private Node<E> tail = null; 
         private int size = 0; 
        
        private class Node<E> {
            
        private E element; 
        private Node<E> next;
        
        public Node(E e, Node<E> n) {
            element = e;
            next = n;
        }
        
       
        public Node<E> getNext( ) {
            return next; 
            
        }
        public void setNext(Node<E> n) {
            next = n; 
            
            }
            
         public E getElement( ) {
            return element; 
            
        } 
        }
         public int size( ) { 
                return size;
                } 
                
        public boolean isEmpty( ) {
            return size == 0; 
            
        } 
        public E first( ) { 
        if (isEmpty( )) {
            return null;
        }
        return head.getElement( );
        } 
        
        public E last( ) { 
        if (isEmpty( )) {
            return null;
            
        }
        return tail.getElement( );
        }
        public void addFirst(E e) { 
        head = new Node<>(e, head); 
        if (size == 0)
        tail = head; 
        size++;
        }
    public void addLast(E e) { 
    Node<E> newest = new Node<>(e, null); 
    if (isEmpty( ))
    head = newest; 
    else
    tail.setNext(newest); 
    tail = newest; 
    size++;
    }
    public E removeFirst( ) 
    { 
    if (isEmpty( )) return null; 
    E answer = head.getElement( );
    head = head.getNext( ); 
    size--;
    if (size == 0)
    tail = null;
    return answer;
    } 

}
    public interface Stack<E> {
     int size( );
     boolean isEmpty( );
     void push(E e);
     E top( );
     E pop( );
}
    public class LinkedStack<E> implements Stack<E> {
     private SinglyLinkedList<E> list = new SinglyLinkedList<>( ); 
     public LinkedStack( ) {
         } 
     public int size( ) {
         return list.size( ); 
         
     }
     public boolean isEmpty( ) {
         return list.isEmpty( ); 
         
     }
     public void push(E element) {
         list.addFirst(element);
         
     }
     public E top( ) { 
         return list.first( ); 
         
     }
     public E pop( ) {
         return list.removeFirst( ); 
         
     }
     
    }
    public static <E>boolean ispal(SinglyLinkedList<Character> linkedlist) 
    {
    	LinkedStack<Character> stacks = new LinkedStack<Character>();
    	
    	SinglyLinkedList <Character> list1= linkedlist;
    	   for(int i=0; i<linkedlist.size; i++) 
    	   {
    		stacks.pop();
    		list1.removeFirst();
    	   }
    	   
    	SinglyLinkedList<Character> list2= linkedlist;
    	   for(int i=0; i<=list1.size; i++) 
    	   {
    		if(stacks.top().equals(linkedlist.first()))
    		  {
    			linkedlist.removeFirst();
    			stacks.pop();
    			   if(i==list1.size) 
    			   {
    				 return true;
    			    }
    		  }
    		else {
    				return false;
    			  }
    			
    		}
    		
    		
    	}
    	
public static void main(String[] args) {
	
	SinglyLinkedList <Character> list= new SinglyLinkedList <Character>();
	list.addFirst('q');
    list.addFirst('a');
    list.addFirst('x');
	list.addFirst('a');
	list.addFirst('q');
}
}

PROBLEM 2
class Queue 
    { 
    int front, rear, size; 
    int  capacity; 
    int array[]; 
       
    public Queue(int capacity) { 
         this.capacity = capacity; 
         front = this.size = 0;  
         rear = capacity - 1; 
         array = new int[this.capacity]; 
            
    } 
       
    boolean isFull(Queue queue) 
    {  return (queue.size == queue.capacity); 
    } 
       
    boolean isEmpty(Queue queue) 
    {  return (queue.size == 0); } 
       
    void enqueue( int item) 
    { 
        if (isFull(this)) 
            return; 
        this.rear = (this.rear + 1)%this.capacity; 
        this.array[this.rear] = item; 
        this.size = this.size + 1; 
        System.out.println(item+ " added to the queue"); 
    } 
       
    int dequeue() 
    { 
           
        int item = this.array[this.front]; 
        this.size = this.size - 1; 
        return item; 
    } 
       
    int front() 
    { 
        if (isEmpty(this)) 
            return Integer.MIN_VALUE; 
           
        return this.array[this.front]; 
    } 
        
   
    int rear() 
    { 
        if (isEmpty(this)) 
            return Integer.MIN_VALUE; 
           
        return this.array[this.rear]; 
    } 
} 
   
    
 
public class Test 
{ 
    public static void main(String[] args)  
    { 
        Queue queue = new Queue(1000); 
            
        queue.enqueue(34); 
        queue.enqueue(45); 
        queue.enqueue(56); 
        queue.enqueue(67); 
        queue.enqueue(78); 
        
        System.out.println(queue.dequeue() +  
                     " deleted from the queue\n"); 
  
    } 
}
PROBLEM 3
import java.util.ArrayList;
import java.util.EmptyStackException;

public class example{
          public class Stack<E> {

             private ArrayList stack = new ArrayList();
                public void push(<E> e) {
                  stack.add(e);
             }

             public Object pop() {
                if (stack.isEmpty())
                throw new EmptyStackException();
                return stack.remove(stack.size()-1);
             }

             public boolean isEmpty() {
                 return stack.isEmpty();
             }
        }

          public static void main (String[] args) 
          { 
              Stack<Integer> stack = new Stack<Integer>(); 
        
              stack.push(34);
              stack.push(76);
              stack.push(23);
              stack.push(28);
              stack.push(98);
              stack.pop(); 
              
        
}
}

PROBLEM 5

public class LinkedPositionalList<E> implements PositionalList<E> {

    private static class Node<E> implements Position<E>{

        private E element;
        
        private Node<E> prev;
        
        private Node<E> next;
        
        public Node(E e, Node<E> prevNode, Node<E> nextNode){
            this.element=e;
            this.prev=prevNode;
            this.next=nextNode;
        }

        public E getElement() throws IllegalStateException {
            if(getNext()==null){
                throw new IllegalStateException("Position is no longer valid");
            }
            return element;
        }
        
        public Node<E> getPrev() {
            return prev;
        }
        public void setPrev(Node<E> prev) {
            this.prev = prev;
        }
        public Node<E> getNext() {
            return next;
        }
        public void setNext(Node<E> next) {
            this.next = next;
        }
        public void setElement(E element) {
            this.element = element;
        }
        
    }
    
    private int size=0;
    private Node<E> header;
    private Node<E> trailer;
    
    public LinkedPositionalList(){
        header=new Node<E>(null, null, null);
        trailer=new Node<E>(null,header,null);
        header.setNext(trailer);
    }
    
    public int size() {
        return size;
    }

    public boolean isEmpty() {
        return (size==0);
    }

    public Position<E> fist() {
        return header.getNext();
    }

    public Position<E> last() {
        return trailer.getPrev();
    }

    public Position<E> addFist(E e) {
        return addBetween(e, header, header.getNext());
    }

    public Position<E> addLast(E e) {
        return addBetween(e, trailer.getPrev(), trailer);
    }


    public Position<E> before(Position<E> p) throws IllegalArgumentException {
        Node<E> node=validate(p);
        return node.getPrev();
    }


    public Position<E> after(Position<E> p) throws IllegalArgumentException {
        Node<E> node = validate(p);
        return node.getNext();
    }


    public Position<E> addBefore(Position<E> p, E e) throws IllegalArgumentException {
        Node<E> node = validate(p);
        return addBetween(e, node.getPrev(), node);
    }


    public Position<E> addAfter(Position<E> p, E e) throws IllegalArgumentException {
        Node<E> node = validate(p);
        return addBetween(e, node, node.getNext());
    }

    public E set(Position<E> p, E e) throws IllegalArgumentException {
        Node<E> node = validate(p);
        E oldValue = node.getElement();
        node.setElement(e);
        return oldValue;
    }


    public E remove(Position<E> p) throws IllegalArgumentException {
        Node<E> node = validate(p);
        E oldValue = node.getElement();
        Node<E> prevNode = node.getPrev();
        Node<E> nextNode = node.getNext();
        prevNode.setNext(nextNode);
        nextNode.setPrev(prevNode);
        node.setElement(null);
        node.setNext(null);
        node.setPrev(null);
        size--;
        return oldValue;
    }
    
    private Position<E> addBetween(E e, Node<E> prev, Node<E> next) throws IllegalArgumentException {
        Node<E> newNode = new Node<E>(e, prev, next);
        prev.setNext(newNode);
        next.setPrev(newNode);
        size++;
        return newNode;
        
    }
    
    private Node<E> validate(Position<E> p) throws IllegalArgumentException{
        if(!(p instanceof Node)){
            throw new IllegalArgumentException("Not a valid position");
        }
        Node<E> node = (Node<E>)p;
        if(node!=null || node.getNext()==null){
            throw new IllegalArgumentException("Position is no longer in the list");
        }
        return node;
    }
    

}
reference: https://amitpamecha.wordpress.com/2016/01/14/data-structure-positional-lists/
